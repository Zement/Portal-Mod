81547900 time left, can't be changed?



800b3b60 time is changing at this address! runs once per second!
is usually read at 800e3b38, IBLAND at 80159c0c, sometimes 800cdea0,

80429fa0 points PAL, can be set!
81547908 points PAL


80d25bf8 time !!! can be set! 4096 (0x1000) per second!

00354e93 life

00354e90 life
003fc95c life
015478ec life

running:
01201030 ACC?
01201050 ACC?
0154b8c8 shows + to the right
0154b8ec shows + to the right
0154b910 shows + to the right, enough to change this! YEAH !!!
0154ba1c shows + to the right
0154c83c shows - to the right
0154c854 shows + in hurry to the right, -1.5 - 1.5 without button 1, -3 - 3 with button 1
0154cca8 1/0 running / not running


8043fbd4
80433360-0x5488 = 8042ded8

SPRING VALUE IN CODE:
8015f61c


00354ea0 coins, subject to change

40245A00

HOPE:
00405304 00000004 when in the air
0154b8cc + -4 up / down, speed in the air, cannot be changed
0154ba20 + -4
0154c6bc 00010000 when in the air
0154c840 - + 4 up / down
015e36cc some height value type, -64 - +64?


Fire:
00375540 # of fireballs
00375550 # of fireballs, can be changed !!

PAL fire?
80375840
80375850

ADDRESS IN THE MEMORY OF PARENT:
80040984


is:
00375aa8
00375ab8
011fe030

holding down the 1 button?
0x8039f6a0
0x8039f700
0x8039f760
0x803a1dc8
etc...


8554cd48 physical size of mario, 3f800000 = 1, 40000000 = 2 etc
8042BB54 same, better

8154cce4 size of mario, fire mario etc so! 0 = small, 1 = large, 2 = fire, 4 = spinning, 6 = ice, 5 = penguin, 3 = mini
815dbb74-815dbb8c number of powerups! everyone!


0154c858 speed in y?
8154b8f0, check memory breakpoint!
8154b8ec, check memory breakpoint!


runs WRITE at 80057154
cross READ never know

8154b804?
8154b804 + 0xec = 8154b8f0 speed in y, can be changed!
this big thing happens in 80057150
8154b918 jump speed up? 114
8154b8b4 position in y-direction, can be changed! b0
8154b8b0 x-led position, subject to change! ac
8154c8d0 - 10cc
8154c858 also jump rate 1054

8154b9f0

8042bba0 ??? grave??
800573f0?
8043fd38?


8043fc98
8042e780


80237d90 fsubs f1, f1, f0


0x802f77ac
0x802f77a4

80237d80 important function? runs at 80057570



804055d8 contains the address? 80405618 when in the air
80405604 4 in the air, 0 otherwise
811fdf00 air thing? test brp!
81200868 air thing? Well
8154c6bc air thing?


0x8154b804 + 0xac = 8154b8b0
0x8154b804 + 0xe8 = 8154b8ec
8154b8f0?
0x8154b804 + 0xf0 = 8154b8f4
0x800570f8?
0x800570f8 + 0x2c = 80057124
0x800570f8 + 0x28 = 80057120
0x800570f8 + 0x30 = 80057128
0x800570f8 + 0x10 = 80057108
0x800570f8 + 0x14 = 8005710C
0x800570f8 + 0x18 = 80057110

0x800570f8 + 0x14 = 8005710C
0x800570f8 + 0x18 = 80057110



0x8043fd38
800574cc

802f77a0
802f77a0 + c
802f77a0 + 4

80433360-0x77c0 = 8042bba0


8043fc98 + 0x70 = 8043fd08

802f77a4 something good? happens at 80237dc8
802f77ac something good?


good things happen around 800575f0

8043fc98 + 0x1C = 8043fcb4

8043fd38 + 0x4 = 8043fd3c happens at 80057550

0x8154b804 + 0xec = 8154b8f0


8042bbb4 tail feather speed !!
8042bb44 max fall speed !! way minus you fly up to the ceiling!
80936034 pi ~ = 3.141593

surely someone nearby who is gravitating?

8154e27c holds in shell => = 0000040E, 0 otherwise

8154bb90 0 => not damaged, 01000000 => damaged, 1 => falls through the earth and dies, 10 => mimes,
8154cd68 1 => sitting on yoshi, 0 otherwise?

8154cc7c contains different addresses, jumps, sits on yoshi, stands etc
8154cc94 803765b0 on yoshi, 80375f2c in the field, 8035459c in the air, 8035455c land,
8154cc9c 80375f6c jumps by yoshi

8154cc7c is set to 803765b0 => mario jumps! can jump in the air then!
80375fac fall?
8035459c jumping?
8037612c tailpipe
8037602c dolls
8035461c interrupted tail can


8154b9e0 has c41436f4 then not yoshi, c4141f3c then on yoshi
8154c828 different values ​​depending on whether on yoshi, jumps, stands still,


8043fd2c 1c8 then food in the mouth? 1 then hammer? no huh?


803551e4 1 = end of runway, 0 = not end
80355220 - || -

80d250a8 ban ID? yey !!
80405eac something similar?

must find registers for world too!
00439c14 can be world
00d25408 world !!



!!!!!! TIMER JIGGER !!!!!!!

orig:
800b3b60 9421ffd0


800b3b60 49E4C4A0; b 0x1e4c4a0
48B1C420; b ...

80bcff80 9421ffd0; stwu r1, -48 (r1); original value
      84 39E00000; li r15.0
      88 3E0081F0; lis r16, 0x81f0
      8c 3E2080D2; lis r17, 0x80d2; enter the world address
      90 3A315408; addi r17, r17,0x5408; enter world address part 2
      94 82510000; lwz r18, 0 (r17); r18 = world
      98 3E2080D2; lis r17, 0x80d2; load banID
      9c 3A3150A8; add r17, r17.0x50a8; read banID part 2
      a0 82310000; lwz r17.0 (r17); load banID to r17
      a4 3A60000c; li r19, 12; shift so much
      a8 7E529830; slw r18, r18, r19; shifta!
      ac 7E109378; or r16, r16, r18; r16 = 0x81fxx000, xx = world
      b0 3A600004; li r19, 4; also shift this
      b4 7E319830; slw r17, r17, r19
      b8 7E108B78; or r16, r16, r17; r16 = 0x81fxxyy0, yy = path
      bc 82300000; lwz r17, 0 (r16)
      c0 3A310001; addi r17, r17,1; time passes !!!
      c4 92300000; stw r17, 0 (r16)

      c8 3E0080D2; lis r16.0x80d2; half time
      d0 3A105BF8; addi r16, r16.0x5bf8; time address, 80d25bf8
      d4 3A60000c; li r19, 12; time should be shifted 12 steps
      d8 7E319830; slw r17, r17, r19; shift 12 steps to the left!
      dc 92300000; stw r17.0 (r16); load time in points

      e0 4B4E3B84; b -0xb1c47c; go back to orig




9421ffd039E000003E0081F03E2080D23A315408825100003E2080D23A3150A8823100003A60000c7E5298307E1093783A6000047E3198307E108B78823000003A310001923000003E0080D23A105BF83A60000c7E319830923000004B4E3B84


<memory offset = "0x800b3b60" value = "48B1C420" />
<memory offset = "0x80bcff80" value = "9421ffd039E000003E0081F03E2080D23A315408825100003E2080D23A3150A8823100003A60000c7E5298307E1093783A6000047E3198307E108B78823000003A008E008E008E008E008E008A00AA


!!!!!!!!!! gravity-searching !!!!!!!!!!
float x_speed_inc
float y_speed_inc can be something? address???
HandleYSpeed ​​()
class dEn_c good shit?


0x80163920 setspeed, frame?
8006cde0 handle y speed, is all about enemies it seems
8006cd90 handle x speed
8006CD40 UpdateObjectPosBasedOnSpeedValues_real

8006ce00 storea gravity ?? be400000 = -0.187500, reasonable?

81541414 gravity for EN goomba, hmm

8042bb28 jump speed for mario!


SIMPLE POINGE FIELD CHANGE TEST, set to 0 all the time:

800b3b60 48b1c420

80bcff80 9421ffd0
3de00000
3e000042
3a104fd0
3a104fd0
91f00000
4b4e3bcc


<memory offset = "0x800b3b60" value = "48b1c420" />
<memory offset = "0x80bcff80" value = "9421ffd03de000003e0000423a104fd03a104fd091f000004b4e3bcc" />


try jumping to address 802f6710 instead? works for the minus patch!


800e3b38 48212BD8

802f6710 80010014
802f6714 3de00000
802f6718 3e000042
802f671c 3a104fd0
802f6720 3a104fd0
802f6724 91f00000
802f6728 4BDED414



<memory offset = "0x800e3b38" value = "48212bd8" />
<memory offset = "0x802f6710" value = "800100143de000003e0000423a104fd03a104fd091f000004BDED414" />


just try to run nope and jump back: FUN!


800e3b38 48212BD8

802f6710 80010014
802f6714 60000000
802f6718 60000000
802f671c 60000000
802f6720 60000000
802f6724 60000000
802f6728 4BDED414



<memory offset = "0x800e3b38" value = "48212bd8" />
<memory offset = "0x802f6710" value = "8001001460000000600000006000000060000000600000004BDED414" />


save the records on the stack, use them, put them back !!
WORKING, ALWAYS ADDRESS 0x8yyyyyyy !!!!!!!!!!

800e3b38 48212BD8; b 0x802f6710

802f6710 80010014; lwz r0.20 (r1)
94A1FFFC; stwu r5, -0x4 (sp)
94C1fffc; stwu r6, -0x4 (sp)
3ca00000; lis r5, 0
3CC08042; lis r6, 0x8042 !!!!!!!!!!
38C64FD0; addi r6, r6, 0x4fd0
38C64FD0; addi r6, r6, 0x4fd0
90A60000; stw r5, 0 (r6)
84c10000; lwzu r6, 0 (sp)
84a10004; lwzu r5, 4 (sp)
38210004; addi r1, r1,0x4
4BDED400; b back



<memory offset = "0x800e3b38" value = "48212bd8" />
<memory offset = "0x802f6710" value = "8001001494A1FFFC94C1fffc3ca000003CC0804238C64FD038C64FD090A6000084c1000084a10004382100044BDED400" />


try increasing 1 on the points field each time:
IT WORKS !!! runs x number of times per second, x =?

800e3b38 48212BD8; b 0x802f6710

802f6710 80010014; lwz r0.20 (r1)
94A1FFFC; stwu r5, -0x4 (sp)
94C1fffc; stwu r6, -0x4 (sp)
3CC08042; lis r6, 0x8042 !!!!!!!!!!
38C64FD0; addi r6, r6, 0x4fd0
38C64FD0; addi r6, r6, 0x4fd0
80A60000; lwz r5, 0 (r6)
38A50001; addi r5, r5.1
90A60000; stw r5, 0 (r6)
84c10000; lwzu r6, 0 (sp)
84a10004; lwzu r5, 4 (sp)
38210004; addi r1, r1,0x4
4BDED3FC; b back


<memory offset = "0x800e3b38" value = "48212bd8" />
<memory offset = "0x802f6710" value = "8001001494A1FFFC94C1fffc3CC0804238C64FD038C64FD080A6000038A5000190A6000084c1000084a10004382100044BDED3FC" />


write completely in asm:
800e3b38 48212BD8; b 0x802f6710

800e3ad4 48212c3c; b 0x802f6710; might be better to drive here


802f6710:

#lwz r0.20 (r1) #orig for 3b38
lbz r0.10 (r31) #orig for 3ad4

#save registers
stwu r5, -0x4 (sp)
stwu r6, -0x4 (sp)
stwu r4, -0x4 (sp)
stwu r3, -0x4 (sp)
stwu r7, -0x4 (sp)

#set r7 = 0x80fyyzz0
lis r5, 0x80d2
addi r5, r5,0x5408 # r5 = 0x80d25408 = world_addr
lwz r6, 0 (r5) # r6 = world
lis r5, 0x80d2
addi r5, r5,0x50a8 # r5 = 0x80d250a8 = stage_addr
lwz r4, 0 (r5) # r4 = stage
li r3, 12 #shift like this a lot
slw r6, r6, r3 #shifta r6 12 steps
li r3, 4 #shifta 4
slw r4, r4, r3 #shifta r4 4
lis r7, 0x80f0
or r7, r7, r6
or r7, r7, r4 # r7 = 0x80fyyzz0

#check if finished playing, 1 at address 803551e4 if yes, 0 if no
lis r5, 0x8035
ori r5, r5,0x51e4 # r5 = 0x803551e4
lwz r6, 0 (r5) # r6 = value in r5
cmpwi r6,1 # r6 == 1?
beq .stage_complete #yepp, jump to stage_complete
#here r6 == 0

#store timer ++ in 0x80fyyzz0
lwz r6, 0 (r7) # r6 = value from 0x80fyyzz0
addi r6, r6,1 # hours ++
stw r6, 0 (r7) #store it back

#make sure the record isn't zero
lwz r3, 4 (r7) # r3 = value in r7 + 4 = record
cmpwi r3,0 #compare r3 to zero
bne .print_record #if not, jump
li r3,0x7512 #else, set record to 0x7512 = 999 * 60/2
addi r3, r3,0x7512 # r3 = 999 * 60
stw r3,4 (r7) #record = 999 * 60

#print record at regular timeslot, 80d25bf8
.print_record:
lwz r3, 4 (r7) # r3 = record
li r5, 60 #div 60
divwu r3, r3, r5 #divide record at 60
li r4, 0xc #shift 12 steps
slw r3, r3, r4 #shift r3 12 steps to the left

lis r5,0x80d2
ori r5, r5,0x5bf8 # r5 = time_addr
stw r3, 0 (r5) #store (record / 60) << 12 in time_addr

#print timer into points_addr
lis r5, 0x8042 # r5 = 0x80420000
addi r5, r5,0x4fd0
addi r5, r5,0x4fd0 # r5 = 0x80429fa0
li r3,60 #load 60 into r3
divwu r6, r6, r3 #hours = hours / 60
#li r3,100 # 100 into r3
#mulhwu r6, r6, r3 #timer * = 100
stw r6, 0 (r5) #store back, r6 holds timer value
b .end #jump past stage_complete

.stage_complete:
#here the stage is complete
#check if it's a new record!
lwz r4, 0 (r7) # r4 = value in 0x80fyyz0
lwz r5, 4 (r7) # r5 = value in 0x80fyyz4 = record

cmp 0.1, r5, r4
bt lt, .recordend # r4> r5 => no record, go to recordend
stw r4, 4 (r7) #record the record


lis r5,0x80d2
ori r5, r5,0x5bf8 # r5 = time_addr
stw r3, 0 (r5) #store 0 to regular timeslot so it won't get
#added to the points etc!

#lis r5, 0x8042 # r5 = 0x80420000
#addi r5, r5,0x4fd0
#addi r5, r5,0x4fd0 # r5 = 0x80429fa0
#stw r6, 0 (r5) #also print out timer to points_addr!

.recordend:
li r3,0 #store 0 to r3
stw r3, 0 (r7) #reset timer for next run etc

.end:

lwzu r7, 0 (sp)
lwzu r3, 4 (sp)
lwzu r4, 4 (sp)
lwzu r6, 4 (sp)
lwzu r5, 4 (sp)
addi r1, r1,4
b back

881F000A 94A1FFFC
94C1FFFC 9481FFFC
9461FFFC 94E1FFFC
3CA080D2 38A55408
80C50000 3CA080D2
38A550A8 80850000
3860000C 7CC61830
38600004 7C841830
3CE080F0 7CE73378
7CE72378 3CA08035
60A551E4 80C50000
2C060001 41820064
80C70000 38C60001
90C70000 80670004
2C030000 40820010
38607512 38637512
90670004 80670004
38A0003C 7C632B96
3880000C 7C632030
3CA080D2 60A55BF8
90650000 3CA08042
38A54FD0 38A54FD0
3860003C 7CC61B96
90C50000 48000024
80870000 80A70004
7C252000 41800014
90870004 3CA080D2
60A55BF8 90650000
38600000 90670000
84E10000 84610004
84810004 84C10004
84A10004 38210004

4BDED2D0

0x80fyyzz0 r7, current time in seconds * 60, thus untouched
0x80fyyzz4 record time, also untouched
0x80429fa0 points_addr, 0x80fyyzz0 / 60, preferably also with tenths
0x80d25bf8 regular_timeslot, (0x80fyyzz0 / 60) << 12



take the time / 60 to get in seconds! multiply then by 4096 (0x1000) before it is stored in record!

0x on offset !!!!!!!!!!!!!!!!
<memory offset = "0x800e3ad4" value = "48212c3c" />
<Memory Offset = "0x802f6710" value


WHEN IT WASN'T A RECORD:
SET 803551f8 to FFFFFFFF when 803551e4 is set to 1,
then set 803551e4 to 2 and the path ends!

MAKE A PORTAL MOD !!!
