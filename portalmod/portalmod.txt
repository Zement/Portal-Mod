
PLAYER 1 modifierbara:
8154b804	PLAYER 1!
8154b910	hastighet i x
8154b8f0	hastighet i y
8154b8b4	läge i y-led
8154b8b0	läge i x-led
8154b904	vänster = 0000d000, höger = 00003000
+0x38c		så man ej kan interagera etc!
8154c6ac	nåt med hålla i
8154c6b0	nåt med hålla i
8154e27c	nåt med hålla i
8154c698	zoom?

+0xea8		button presses
+0xeac		button presses

BUTTONS in +0xea8:
B:			0x0400 0000
A:			0x0800 0000
1:			0x0200 0000
2:			0x0100 0000
+:			0x0000 0010
-:			0x1000 0000
up:			0x0000 0002
left:		0x0000 0008
right:		0x0000 0004
down:		0x0000 0001?
home:		0x8000 0000

so B and 1:	0x0400 | 0x0200 = 0x0600!

81548aec	någon annan player, i ordningen man lades till?
81545dd4	annan player? 0x2d18 i storlek
815430bc	annan player?

80095950	collision callback, gäller fiender, iaf goomba, verkar gälla fiender emellan också
80095C20	player collision! körs när man krockar in i fiender, dock ej om man dödar dem, eller om man hoppar på taggiga
80064d10	körs när fiender tas bort, t.ex. när man hoppat sönder en goomba
80064350	beforeCreate stageactor, körs innan en ny actor skapas, r3 innehåller adress till början på dActor_c-klassen
			kan användas till att göra en portalskjutare! körs när man kastar snö nämligen.


80162C40	OBJECT CREATE!! bara fyll i r3 vilket slags objekt! körs när man kastar snöboll t.ex.

objektnummer: (hex)
33		goomba
124		mini goomba
36		koopa
191		ett trött mynt...
AE		tusenfoting
90		sån stor svart sak
87		mecha-koopa
86		bobomb (para)
85		vanlig bobomb


81540320	koopa


81540d48	goomba
81540fbc	0x00002000 på marken, 0 i luften, 0x04000000 om fast i tile :o
81540fc4	1 om på marken, 0 i luften
81540fc8	0 i luften, 0x000d0000 på marken
81540fd4	0 i luften
81540fd8	0x10100000 om i luften, etc


fast i tile där uppe:
81540df4	44900000	x
81540df8	c3ee5800	y

slå i väggen där nere:
81540df4	448f0000	x
81540df8	c4190000	y



8006C580	beforeDelete, körs från 800327cc för goomba iaf
8015fe80	

80064540	beforeDraw__13dStageActor_cFv, r3 = adressen på en random fiende som ritas ut


80095D30	prePlayerCollision! körs när man ska hoppa på goomba t.ex., r3=adress till fiende (tror jag), körs även när man krockar!!!

r3+8		sorts fiende i övre 16 bit! 33=goomba, 57=spike top etc
r3+0x100	rotation! i övre 16 bit!
r3+0xe8		actorns hastighet i x-led
r3+0xec		actorns hastighet i y-led
r3+0xac		pos i x-led
r3+0xb0		pos i y-led
r3+0x124	is_visible
r3+0xf8		gravity?
r3+0x290	något om att man står på fötter?

r3+0x274	krockar med någon tile om != 0!!!


r3+0x5ec	tiden kvar på bomben!! sätt till 0 så sprängs den!

8039f6a0	knappar nedtryckta, 24000000 = A, 28000000 = B?

##för den stora svarta!
r3+0x5FC	pos i x
r3+0x600	pos i y
r3+0x5f8	hast. y

		
80162E40	Z13FindActorByIDj
80162E90	findactorbytype


togezo.arc	taggiga gubbar
met_toge.arc	taggig gubbe! använd denna som portal tack! 57 som ID!
kuribo.arc	goomba!
nokonokoX.arc	koopa!
bombhei.arc	bob-omb





övergripande plan:
i objectcreate, kolla om r3=isboll och ingen tidigare portal är skapad,
 om det är en isboll, ändra till någon fiende som ska agera portal (flygmössa?! :D)

i beforecreate, kolla r3+nåt om det är fienden jag skapat, om det är det,
spara ner adressen till den, och spara ner att första portalen är skapad
sätt gravitation och x/y-speed till 0, flytta en bit ifrån mario så han ej skadas

i något ställe som körs ofta, öka x-speed (så småningom x+y med cos och sin)
medan adress till portalen+0x274 (lower 16 bit) inte är lika med 0.

i preplayercoll, kolla om r3=portal 1 eller 2, om 1, sätt hastigheter och positioner
från portal 2, och vice versa. sätt skapad portal till 0, så en ny kan skapas.

------
determinera orientation:
när en portal fastnat, sätt något minnesvärde till 1, i gameloop kolla om orientation-minnesvärdet
är == 0 säger vi, och maybeorientation också är ==0,isåfall kör determine_orientation som
flyttar åt höger dx, sätter 1 i maybeorientation-minnesvärdet och exitar. när den körs nästa
gång är maybe==1, kolla om den fortfarande är fastnad, isåfall ska den hoppa till portal_is_up_down_or_right

-------
på riktigt:
orientation på vanliga tegelbitar, r3+0x274:
vänster		0x00000014
höger		0x00000028
där uppe	0x04000000		HÄNGER UNDER ALLTSÅ
där nere	0x00002000		STÅR PÅ ALLTSÅ, även 0x10 på +0x27c!
fri			0x00000000
-------

inaktivera etc:
i playercoll, sätt 1 i 802f691c i slutet, stäng av den och sätt
till 0 i gameloop när den nått typ 2000 ~ .5 sek?



SPARA adress till PORTAL1 I 802f6800, PORTAL2 I 802f6804!

kasta mynt istället för is, flytta efter skapande
FUNKAR!!! ANVÄND ALDRIG 80bc0000!!!!

PAL:
i adress 80162C40 (object create):
b 0x193ad0		#hoppa till 802f6710

NTSC:
i adress 80162B00 (object create):
b 0x193c10		#hoppa till 802f6710


NTSC och PAL:
i adress 80064350 (beforecreate): 
b (0x802f6740-0x80064350)	#hoppa till 802f6740


i 802f6710:
cmpwi r3, 0x68		#checka om isboll
bne .quit
#här är isboll
#lis r18,0x8154
#ori r18,r18,0xba7b
#lbz r18,0(r18)
#cmpwi r18,0			#kolla så att man inte står intill en vägg
lis r18, 0x8154
ori r18,r18,0xb804
lhz r18, 0xea8(r18)		#kolla om B hålls inne
#lis r19, 0x8042
#ori r19,r19,0x9fa0
#stw r18, 0(r19)
cmpwi r18, 0x0600
bne .quit
li r3, 0x85		#ändra till bob-omb
.quit:
cmpwi r4,0		#kör det som står i 80162c40!
b -0x193ad0-9*4+4


i 802f6740:
stwu r1,-16(r1)		#kör det som stod i 80064350
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r7
stwu r8, -0x4(sp)	#spara r8

lwz r5, 8(r3)		#r5 = typ av fiende
xoris r7,r5,0x0124
cmpwi r7,0			#r5 = mini goomba
#mtlr r0
beq .load_mini_goombas

.check_bobomb:
lis r6,0x802f
ori r6,r6,0x6900	#r6 = 0x802f6900

xoris r5,r5,0x0085	
cmpwi r5, 0x0		#om r5 = bobomb
bne .exit


lwz r5,8(r6)		#r5 = 0/1/2
cmpwi r5,0
#beq .save_first_portal
beq .store_a_1_and_exit

cmpwi r5,2
beq .save_first_portal

.save_second_portal:
lwz r5,4(r6)
cmpwi r5,0		#har det lagts någon innan?
beq .load_2

#else, kill the previous one, mohaha (well, make it invisible..)
lwz r7,4(r6)		#r7 = addr to bobomb
cmpwi r7,0
beq .exit
lhz r5, 8(r7)		#make sure it's a bobomb
cmpwi r5, 0x85
bne .load_2
lhz r5, 10(r7)		#make sure it's not gone
cmpwi r5, 0x200
beq .load_2

li r5,0
stw r5, 0x124(r7)   #set visibility

.load_2:
li r5,2
stw r3,4(r6)		#spara ner adressen till portalen i 802f6904
b .save_portal

.save_first_portal:
lwz r5,0(r6)
cmpwi r5,0		#har det lagts någon innan?
beq .load_1

#else, kill the previous one, mohaha

lwz r7,0(r6)
cmpwi r7,0
beq .exit
lhz r5, 8(r7)		#make sure it's a bobomb
cmpwi r5, 0x85
bne .load_1
lhz r5, 10(r7)		#make sure it's not gone
cmpwi r5, 0x200
beq .load_1

li r5,0
stw r5, 0x124(r7)

.load_1:
#check tot num of portals
#lwz r5, 0x1c(r6)
#addi r5,r5,1
#stw r5, 0x1c(r6)
#cmpwi r5,1
#beq .exit			#first portal, exit!
li r5,1
stw r3,0(r6)		#spara ner adressen till portalen i 802f6900

.save_portal:
stw r5,8(r6)		#802f6908 = #portal

.check_mario_direction:
#lwz r8, 0x74(r6)
#cmpwi r8,0
#beq .exit
#lwz r8, 0x70(r6)
#cmpwi r8,0
#beq .exit

cmpwi r7,0
beq .exit

lis r5,0x8154
ori r5,r5,0xb904	#r5 = 0x8154b904, marios direction
lwz r5, 0(r5)		#r5 = 0000d000 eller 00003000
cmpwi r5,0x3000		
beq .save_right

.save_left:
lfs f8, 0x74(r6)	#f8 = cos(wiimotetilt)
fneg f8,f8			#f8 = -cos(wiimotetilt)
stfs f8, 0x84(r6)	#store -cos to update etc
#stfs f8,0xe8(r7)	#hastx = -cos(wiimotetilt)
lfs f8, 0x70(r6)	#f8 = sin(wiimotetilt)
#fneg f8,f8
stfs f8, 0x80(r6)	#store sin to update etc
#stfs f8,0xec(r7)	#hasty = sin(wiimotetilt)
b .exit

.save_right:
lfs f8, 0x74(r6)	#f8 = cos(wiimotetilt)
stfs f8, 0x84(r6)	#store it to update etc
#stfs f8,0xe8(r7)	#hastx = cos(wiimotetilt)
lfs f8, 0x70(r6)	#f8 = sin(wiimotetilt)
stfs f8, 0x80(r6)	#store it to update etc
#stfs f8,0xec(r7)	#hasty = sin(wiimotetilt)

.exit:
lwzu r8, 0(sp)
lwzu r7, 4(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4

b -(0x802f6740-0x80064350)-81*4+4

.store_a_1_and_exit:
li r5,1
stw r5,0x8(r6)
b .exit


.load_mini_goombas:	#lägg in 3 st mini-goombas i 0x802f6930 och framåt kanske?
					#r3 = adressen till en mini-goomba
lis r6, 0x802f
ori r6,r6,0x6930	#r6 = 0x802f6930
lwz r7, 0(r6)		#r7 = adress till en mini-goomba alt. 0
cmpwi r7,0			#fanns ingen goomba
bne .add_second

.add_first:
stw r3, 0x0(r6)
b .exit_goomba

.add_third:
stw r3, 8(r6)		#add the third one
b .exit_goomba

.add_second:
lwz r7, 4(r6)		#adress till nästa goomba
cmpwi r7, 0			#fanns ej där
bne .add_third
#annars lägg i andra
stw r3, 4(r6)

.exit_goomba:
b .check_bobomb




game loop:
PAL:
i 800e3ad4: (ställe som körs ofta, uppdaterar tid egentligen va?)
#b (0x802f8eb8-0x800e3ad4)
#b (0x802f8c90-0x800e3ad4)
#b (0x8040DA00-0x800e3ad4)
#b (0x803325cc-0x800e3ad4)
b (0x80359fcc-0x800e3ad4)

NTSC:
i 800e39e4: (ställe som körs ofta, uppdaterar tid egentligen va?)
b (0x802f8eb8-0x800e39e4)







#r7 ska hela tiden vara adressen till osv!




#i 802f8eb8:
#i 802f8c90:
i 803325cc:
lbz r0,10(r31)		#original-värde
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r7
stwu r8, -0x4(sp)	#spara r8
stwu r9, -0x4(sp)	#spara r9

lis r6,0x802f
ori r6,r6,0x6900	#r6=0x802f6900, adress till portal1!

b .draw_guidance

.after_draw:
#increase timer
lwz r8,0x20(r6)
addi r8,r8,1
stw r8, 0x20(r6)

lwz r7, 8(r6)		#vilken portal lade vi ut förra?
cmpwi r7, 2			#var det två?
beq .place_first_portal

.place_second_portal:
lwz r7, 0(r6)		#r7 = värdet i adressen
b .cont

.place_first_portal:
lwz r7, 4(r6)		#r7 = värdet i adressen

.cont:
cmpwi r7,0			#if r7=0, then exit
beq .exit
lhz r5, 8(r7)		#r5 = typ av fiende

cmpwi r5, 0x85		#om r5 = bobomb
bne .exit			#exit if there wasn't a bobomb

#yes, it's a bobomb, check if it's gone
lhz r8, 10(r7)	
cmpwi r8, 0x200
beq .exit

#not gone, go to check if we can move

.checkifcanmove:
lwz r5, 0x274(r7)	#r5 = 0 om vi kan röra på den
cmpwi r5, 0
beq .move
#otherwise, freeze it

#freeze first:
lwz r5, 0(r6)		#r5 = addr to first portal
cmpwi r5,0
beq .exit
lhz r8, 10(r5)		#0x200 if gone
cmpwi r8, 0x200
beq .exit

li r8, 0
stw r8, 0xf8(r5)	#gravity = 0
stw r8, 0xe8(r5)	#hastx = 0
stw r8, 0xec(r5)	#hasty = 0

.freeze_second:
lwz r5, 4(r6)		#r5 = addr to second portal
cmpwi r5,0
beq .exit
lhz r8, 10(r5)		#2 if gone
cmpwi r8, 0x200
beq .exit

li r8,0
stw r8, 0xf8(r5)	#gravity = 0
stw r8, 0xe8(r5)	#hastx = 0
stw r8, 0xec(r5)	#hasty = 0

.check_orientation:
#lhz r5, 0x27c(r7)	#r5 = 0x01 om den står på marken
#cmpwi r5,0x01		#står på marken
#beq .store_down

lbz r5, 0x276(r7)	#0x20 om står på vanlig mark, typ
cmpwi r5, 0x20
beq .store_down
cmpwi r5, 0x80		#0x80 if on a platform
beq .store_down


#else, check left
lwz r5, 0x274(r7)	
cmpwi r5,0x14		#hänger vänster
beq .store_left

cmpwi r5,0x28
beq .store_right

#else, check if up
srawi r5,r5,24		#0x04000000 => 0x4
cmpwi r5, 4
b .store_up

b .exit

.move:
lfs f8, 0x80(r6)	#f8 = sin(wiimotetilt) när det avfyrades
lis r8, 0x40A0		#r8 = 5.0
stw r8, 0xc(r6)
lfs f5, 0xc(r6)
fmuls f8,f8,f5
stfs f8, 0xec(r7)	#hasty = 5*sin(wiimotetilt)
lfs f8, 0x84(r6)	#f8 = cos(wiimotetilt) när det avfyrades
fmuls f8,f8,f5
stfs f8, 0xe8(r7)	#hastx = cos(wiimotetilt)

.exit:

lwzu r9, 0(sp)
lwzu r8, 4(sp)
lwzu r7, 4(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4
b -(0x802f8c90-0x800e3ad4)-78*4+4 	#n = antalet instr förutom denna

.store_down:
li r8, 4
stw r8, 0x364(r7)
lwz r8, 0x100(r7)	#r8=rotation i övre 16 bit
andis. r8,r8, 0x0000	#no rotation
stw r8, 0x100(r7)	#store it back
b .exit

.store_left:
li r8, 3
stw r8, 0x364(r7)
lwz r8, 0x100(r7)	#r8=rotation i övre 16 bit
andis. r8,r8, 0x0000	#clear rotation
ori r8,r8, 0x4000	#rotate left
oris r8,r8, 0xC000	#rotate left
stw r8, 0x100(r7)	#store it back
b .exit


.store_up:
li r8, 2
stw r8, 0x364(r7)
lwz r8, 0x100(r7)	#r8=rotation i övre 16 bit
andis. r8,r8, 0x0000	#clear rotation
oris r8,r8, 0x8000	#rotate up
ori r8,r8, 0x8000	#rotate up
stw r8, 0x100(r7)	#store it back
b .exit


.store_right:
li r8, 1
stw r8, 0x364(r7)
lwz r8, 0x100(r7)	#r8=rotation i övre 16 bit
andis. r8,r8, 0x0000	#clear rotation
oris r8,r8, 0xC000	#rotate right
ori r8,r8, 0xC000	#rotate right
stw r8, 0x100(r7)	#store it back
b .exit

.discard_portal:
li r8,0
stw r8, 0(r7)
b .exit

.cos:				#experimented to 1-x^2/2+x^3/12 = (x/12-1/2)*x^2+1, only from 0 to pi!
#f8 = in-value
fabs f8,f8			#r8 = |r8|
lis r8, 0x4140		#r8 = 12.0
stw r8,0x14(r6)
lfs f5,0x14(r6)		#f5 = 12.0
fdivs f5,f8,f5		#f5 = x/12

lis r8, 0x3f00		#r8 = .5
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = .5
fsubs f5,f5,f6		#f5 = x/12-1/2
fmuls f8,f8,f8		#f8 = x^2
fmuls f8,f8,f5		#f8 = x^2(x/12-1/2)

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = 1.0
fadds f8,f8,f6		#f8 = x^2(x/12-1/2)+1
#b .cont_move_right_cos
b .after_cos

.sin:				#experimented to x-x^3/7 = x(1-x^2/7), -pi/2 to pi/2
#f8 = in-value
lis r8, 0x40E0		#r8 = 7.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 7.0
fmuls f5,f8,f8		#f5 = x^2
fdivs f5,f5,f6		#f5 = x^2/7

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 1.0
fsubs f6,f6,f5		#f6 = 1-x^2/7
fmuls f8,f8,f6		#f8 = x(1-x^2/7)
#b .cont_move_right_sin
b .after_sin


.draw_guidance:

lis r8,0x8076
ori r8,r8,0x12c8	#r8 = addr to wiimote tilt!

lfs f8, 0(r8)		#f8 = tilt
lis r8, 0x3fc9		#r8 ~ pi/2
stw r8,0x14(r6)
lfs f5,0x14(r6)		#f5 = pi/2
fmuls f8,f8,f5		#f8 = wiimotetilt*pi/2
stfs f8, 0x60(r6)	#store it into 802f6960

#f8 = wiiangle*pi/2
lwz r5, 0x30(r6)	#r5 = addr till mini goomba
cmpwi r5,0
beq .exit_from_draw_guidance		#om det ej var en goomba där, gitta
srawi r8,r5,20		#r8 = 8xx hopefully
andi. r8,r8,0xffff
cmpwi r8, 0x800
blt .exit_from_draw_guidance
lhz r8, 10(r5)
cmpwi r8, 0x200
beq .exit_from_draw_guidance

lis r7, 0x8154
ori r7,r7,0xb804	#r7 = 0x8154b804

#mtlr r0
b .cos

.after_cos:
#here f8=cos(wiimote)
#check if goomba is colliding etc

	#stwu r3, -0x4(sp)	#spara r5
    #stwu r4, -0x4(sp)	#spara r6
	#stwu r5, -0x4(sp)	#spara r6
	#stwu r31, -0x4(sp)	#spara r6
	
#	li 3, 0
#	lis 4, -32721
#	stw 3, 24(31)
#	ori 3, 4, 26944
#	lis 4, -32721
#	lis 5, 16256
#	stw 3, 20(31)
#	stw 5, 26952(4)
#	lwz 3, 20(31)
#	lis 4, 17096
#	stw 4, 4(3)
#	lwz 3, 20(31)
#	lfs 0, 4(3)
#	lfs 1, 0(3)
#	fcmpu 0, 1, 0
#	bge 0, .LBB0_2
#.LBB0_1:                                # %if.then
#	lwz 3, 20(31)
#	lfs 0, 8(3)
#	lfs 1, 0(3)
#	fadds 0, 1, 0
#	stfs 0, 0(3)
#.LBB0_2:                                # %if.end
	
#lwzu r31, 4(sp)
#lwzu r5, 4(sp)
#lwzu r4, 4(sp)
#lwzu r3, 4(sp)
#addi sp,sp,4

lwz r8, 0x100(r7)	#r8 = direction, d000/3000
srawi r8,r8,12		#d / 3
cmpwi r8, 0xd
beq .draw_cos_left

.draw_cos_right:
stfs f8, 0x74(r6)	#store cos(wiimote) to 802f6974
lis r8, 0x41F0		#r7 = 30.0
stw r8, 0x14(r6)
lfs f7, 0x14(r6)	#f7 = 30.0
fmuls f7,f8,f7		#f7 = 30*cos(wiimote)
lfs f5,0xac(r7)		#f5 = mario.x
fadds f5,f5,f7		#f5 = mario.x + 30*cos(wiimote)
stfs f5, 0xac(r5)	#lagra hos goomban
b .goto_sin

.draw_cos_left:
stfs f8, 0x74(r6)	#store cos(wiimote) to 802f6974
lis r8, 0x41F0		#r7 = 30.0
stw r8, 0x14(r6)
lfs f7, 0x14(r6)	#f7 = 30.0
fmuls f7,f8,f7		#f7 = 30*cos(wiimote)
lfs f5,0xac(r7)		#f5 = mario.x
fsubs f5,f5,f7		#f5 = mario.x - 30*cos(wiimote)
stfs f5, 0xac(r5)	#lagra hos goomban

.goto_sin:
lfs f8, 0x60(r6)	#f8 = wiiangle*pi

lwz r8, 0x100(r7)	#r8 = direction, d000/3000
srawi r8,r8,12		#d / 3
cmpwi r8, 0x3
beq .draw_sin_left

.draw_sin_right:
fneg f8,f8
nop

.draw_sin_left:
#mtlr r0
b .sin

.after_sin:
#here f8=sin(wiiangle)
stfs r8, 0x70(r6)	#store sin(wiimote) to 802f6974
lis r8, 0x41F0		#r7 = 30.0
stw r8, 0x14(r6)
lfs f7, 0x14(r6)	#f7 = 30.0
fmuls f7,f8,f7		#f7 = 30*sin(wiimote)
lfs f5,0xb0(r7)		#f5 = mario.y

#.draw_sin_right:
fadds f7,f7, f5		#f7 = mario.y + 30*sin(wiiangle)

.conttt:
lis r8, 0x4170		#r8 = 15.0
stw r8, 0x14(r6)
lfs f5, 0x14(r6)	#f5 = 15.0
fadds f7,f7, f5		#f7 = mario.y - 30*sin(wiiangle) + 15
stfs f7, 0xb0(r5)	#store it etc
b .after_draw

.exit_from_draw_guidance:
b .after_draw







#i 80095950: (collisioncallback, HÄR ska ALLA teleporteras!)
#b (0x802f8c60-0x80095950)
#b (0x802f8a0c-0x80095980)

i 80095c00: (collisioncallback, HÄR ska ALLA teleporteras!)
#b (0x802f8c60-0x80095950)
b (0x802f8a0c-0x80095c00)



#r28 = adress till mario eller vem det nu var som krockade(?)
#i 802f8c60:

i 802f8a0c:
stwu r1,-32(r1)		#ORIG I 80095d30!
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r7
stwu r8, -0x4(sp)	#spara r8
stwu r28, -0x4(sp)	#spara r28
stwu r3, -0x4(sp)	#spara r3

lwz r28, 4(r4)		#r28 = någon som krockar
lwz r3, 4(r3)		#r3 = någon annan som krockar

#check if r28 is a micro goomba, in that case, jump to exit
lhz r5, 0x8(r28)
cmpwi r5, 0x124
beq .exit

#check if r3 is a micro goomba, in that case, jump to exit
lhz r5, 0x8(r3)
cmpwi r5, 0x124
beq .exit

lis r5,0x802f
ori r5,r5,0x6900	#r5 = 0x802f6900

lwz r6,0(r5)		#r6 = adress till första portalen
sub r7,r6,r3		#r3 = addr of what could be a portal
cmpwi r7,0			#samma adress!
beq .teleport_to_2	#detta var första portalen, gå till andra

#otherwise, check if the other address was a portal
lwz r6,4(r5)		#r6 = adress till andra portalen
sub r7,r6,r3		
cmpwi r7,0			#samma adress!
bne .exit

.teleport_to_1:
lwz r6,0(r5)
b .teleport_and_move_normalized

.teleport_to_2:
lwz r6,4(r5)

.teleport_and_move_normalized:
lwz r8, 0x20(r5)	#timer count
cmpwi r8,20
blt .exit			#om timer<20, hoppa till exit

#annars, reset timer och fortsätt
li r8,0
stw r8, 0x20(r5)

###normalize!!!###
lfs f5, 0xe8(r28)	#xspeed
lfs f6, 0xec(r28)	#yspeed

#set min speed etc

fmuls f7,f5,f5		#f7 = x^2
fmuls f8,f6,f6		#f8 = y^2
fadds f7,f7,f8		#f7 = x^2+y^2

#x/0 check!
stfs f7, 0x18(r5)
lwz r8, 0x18(r5)
cmpwi r8,0
beq .after_sqrt

frsqrte f7,f7		#f7 = 1/sqrt(x^2+y^2)

.after_sqrt:
fmuls f5,f5,f7		#f5 = xspeed/sqrt(x^2+y^2)
fmuls f6,f6,f7		#f6 = yspeed/sqrt(x^2+y^2)

lis r8,0x4120		#r8 = 10.0
stw r8, 0xc(r5)
lfs f8, 0xc(r5)
fmuls f5,f5,r8		
fmuls f6,f6,r8	

lfs f7, 0xac(r6)	#f7 = pos i x-led hos portalen
#f5 = hast i x
lis r8,0x40a0		#r8 = 5.0
stw r8, 0xc(r5)
lfs f8, 0xc(r5)
fmuls f5,f5,r8		
#fadds f7,f7,f5		#pos = pos+x_speed
stfs f7, 0xac(r28)	#move mario to that x-pos

lfs f7, 0xb0(r6)	#f7 = pos i y-led hos portalen
#f6 = hast i y
#lfs f8,0xc(r5)
#fmuls f6,f6,f8
#fadds f7,f7,f6		#pos = pos+x_speed
stfs r7, 0xb0(r28)	#move mario to that y-pos


#marios speed is normalized*5 in f5(x) and f6(y)
#now take care of speed mirroring

lwz r6, 0(r5)		#portal 1
lwz r7, 4(r5)		#portal 2
cmpwi r6,0
beq .exit			#no portal there, exit
cmpwi r7,0
beq .exit			#no portal there either, exit
#check that there are still portals at the addresses
lhz r8, 8(r6)
cmpwi r8, 0x85		#r8 = bobomb
bne .exit
lhz r8, 8(r7)
cmpwi r8, 0x85		#r8 = bobomb
bne .exit
#check if portals are gone (out of frame)
lhz r8, 10(r6)		#0x200 if gone
cmpwi r8, 0x200
beq .exit
lhz r8, 10(r7)		#0x200 if gone
cmpwi r8, 0x200
beq .exit

lwz r8,0x364(r6)	#r8 = portal1.orient
lwz r5,0x364(r7)	#r5 = portal2.orient
sub r5,r5,r8
cmpwi r5,0		
bne .not_same_orientation			#not the same orientation, do nothing

.same_orientation:
#which orientation was it?
cmpwi r8, 1			#right
beq .rightleft
cmpwi r8, 3
beq .rightleft

#else, updown
.updown:
lfs f8, 0xec(r28)	#f8 = mario.yspeed
fneg f8,f8
stfs f8, 0xec(r28)	#mario.yspeed *= -1
fneg f6,f6
lfs f8, 0xb0(r28)	#f8 = mario.y
fadds f8,f8,f6
stfs f8, 0xb0(r28)	#f8 = mario.y+yspeed*5
b .exit

.rightleft:
lfs f8, 0x10c(r28)	#f8 = mario.xspeed
fneg f8,f8
stfs f8, 0x10c(r28)	#mario.xspeed *= -1
fneg f5,f5
lfs f8, 0xac(r28)	#f8 = mario.x
fadds f8,f8,f6
stfs f8, 0xac(r28)	#f8 = mario.x+xspeed*15
b .exit

.not_same_orientation:
#check if | _ or _ |
lwz r8,0x364(r6)	#r8 = portal1.orient
lwz r5,0x364(r7)	#r5 = portal2.orient
sub r5,r5,r8
cmpwi r5, 2			#motstående, bara fortsätt
beq	.move_out		
cmpwi r5,-2
beq .move_out

#| _ or _ | here
#check if 3 and 4/4 and 3
lwz r8,0x364(r6)	#r8 = portal1.orient
lwz r5,0x364(r7)	#r5 = portal2.orient
sub r5,r5,r8
cmpwi r5,1			#1 means it's either 4 and 3, 3 and 2, 2 and 1
beq .check_4
cmpwi r5,-1			#-1 means it's either 3 and 4, 2 and 3, 1 and 2
beq .check_4

#here r5 must be 3 or -3, which means 1 and 4, jump to opposing and mirrored
b .opposing_and_mirrored

.check_4:			#if one is a 4, which means that the other must be 3, go to opposing
lwz r8,0x364(r6)	#r8 = portal1.orient
lwz r5,0x364(r7)	#r5 = portal2.orient
cmpwi r8, 4
beq .opposing
cmpwi r5, 4
beq .opposing


#only (1->2, 2->1) and (2->3, 3->2) left
lwz r8,0x364(r6)	#r8 = portal1.orient
lwz r5,0x364(r7)	#r5 = portal2.orient
cmpwi r8, 3
beq .opposing_and_mirrored
cmpwi r5, 3
beq .opposing_and_mirrored
#else, (1->2, 2->1)

#else, not opposing nor mirrored, switch x and y:
.opposing:
lfs f8, 0x10c(r28)	#mario.xspeed
lfs f6, 0xec(r28)	#mario.yspeed
stfs f8, 0xec(r28)
stfs f6, 0x10c(r28)
b .exit

.opposing_and_mirrored:
lfs f8, 0x10c(r28)	#mario.xspeed
lfs f6, 0xec(r28)	#mario.yspeed
fneg f6,f6
stfs f8, 0xec(r28)
stfs f6, 0x10c(r28)

.move_out:
#lfs f8, 0xac(r28)	#f8 = mario.x
#fadds f8,f8,f5
#stfs f8, 0xac(r28)	#f8 = mario.x+xspeed*5

#lfs f8, 0xb0(r28)	#f8 = mario.y
#fadds f8,f8,f5
#stfs f8, 0xb0(r28)	#f8 = mario.y+yspeed*5

.exit:
#sätt 1 i 802f691c
#li r8,1
#stw r8, 0x1c(r5)

lwzu r3, 0(sp)
lwzu r28, 4(sp)
lwzu r8, 4(sp)
lwzu r7, 4(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4
#b -(0x802f8c60-0x80095950)-145*4+4 	#n = antalet instr förutom denna
b -(0x802f8a0c-0x80095950)-145*4+4		#n = antalet instr förutom denna




i 802f9000:	#cos
#f8 = in-value
stwu r8, -4(sp)
stwu r6, -4(sp)
fabs r8,r8			#r8 = |r8|
lis r8, 0x4140		#r8 = 12.0
stw r8,0x14(r6)
lfs f5,0x14(r6)		#f5 = 12.0
fdivs f5,f8,f5		#f5 = x/12

lis r8, 0x3f00		#r8 = .5
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = .5
fsubs f5,f5,f6		#f5 = x/12-1/2
fmuls f8,f8,f8		#f8 = x^2
fmuls f8,f8,f5		#f8 = x^2(x/12-1/2)

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = 1.0
fadds f8,f8,f6		#f8 = x^2(x/12-1/2)+1
lwzu r6,0(sp)
lwzu r8,4(sp)
addi sp,sp,4
blr

i 802f90c0:	#sin, experimented to x-x^3/8 = x(1-x^2/8), -pi to pi
#f8 = in-value
stwu r8, -4(sp)
stwu r6, -4(sp)
lis r8, 0x4100		#r8 = 8.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 8.0
fmuls f5,f8,f8		#f5 = x^2
fdivs f5,f5,f6		#f5 = x^2/8

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 1.0
fsubs f6,f6,f5		#f6 = 1-x^2/8
fmuls f8,f8,f6		#f8 = x(1-x^2/8)
lwzu r6,0(sp)
lwzu r8,4(sp)
addi sp,sp,4
blr




TODO:
X	!!!!!!!fixa x/0-felet!!!!!!!
/	NTSC
/	fixa bugg så man inte kan skjuta genom väggar!
	fixa cleanup i slutet av banan/när man dör etc
	fixa så att 802f6900 eller 04 nollas om det ej är en goomba eller den är död
	hitta bättre minnesplatser etc!!!
	fixa två olika portaler med olika färger
	portaler ska ha en timeout, utifall man skjuter ut i tomma intet
X	fixa så man kan ta med sig saker genom portalen
X	fixa så att man dör av alla andra än bobomb
X	bobomb får inte interagera med andra fiender!
/	bobomb måste vara odödlig!
/	måste trycka på A/B för att lägga portalerna!
/	fixa sikte, kanske goombas som ligger i en linje?? typ göra dom svarta också
/	fixa så att siktet utgår ifrån där skottet kommer ifrån, alt. flytta skottets utgångspunkt
X	_fixa orientation på portalerna_
/	fixa så att hastigheterna blir speglade när portalerna har samma orientation
	(fixa så att hastigheterna även får en min-gräns)
	portalerna ska inte kunna skjutas överallt
	(lär mig blr, bl etc)
X	fixa speglad cos kring origo
X	flytta ut skottet en bit när det skjutits, alt. _inaktivera portalen en kort stund_
/	grafik!
	banor!
	companion cube?
	(något slags spegel som portalskottet studsar på?)

adresser:
802f6900	portal 1
802f6904	portal 2
802f6908	aktiv portal
802f6914	mellanlagra saker till lfs etc
802f6918	mellanlagra saker till lfs etc
802f691c	tot antal portaler lagda
802f6930	mini-goomba	
802f6934	mini-goomba
802f6938	mini-goomba
802f6940	



802f6960	wiimote-tilt -pi/2 -> pi/2

802f6970	sin(wiimote)	uppdateras
802f6974	cos(wiimote)	uppdateras

802f6980	sin(wiimote)	läggs in när ett skott avfyras
802f6984	cos(wiimote)	-||-

bobomb:
+0x300		orientation, 1 höger, 2 upp, 3 vänster, 4 ner



hoppa till 80095bd4 om det är en bobomb etc (skip collision)
r28 är en av de som krockat, r31 är den andra

i 80095980:
b (0x802fdde8-0x80095980)

i 802fdde8:
stwu r5, -4(sp)
stwu r6, -4(sp)
stwu r7, -4(sp)

.check_if_bobomb28:
lhz r5, 8(r28)	#r5 = 0x85 om bobomb
cmpwi r5, 0x85
beq .skip_collision

.check_if_bobomb31:
lhz r5, 8(r31)			#r5 = 0x85 om bobomb
cmpwi r5, 0x85			
beq .skip_collision

.check_if_microgoomba28:
lhz r5, 8(r28)	#r5 = 0x124 om bobomb
cmpwi r5, 0x124
beq .skip_collision

.check_if_microgoomba31:
lhz r5, 8(r31)			#r5 = 0x124 om bobomb
cmpwi r5, 0x124			
beq .skip_collision


.exit:
lwzu r7,0(sp)
lwzu r6,4(sp)
lwzu r5,4(sp)
addi sp,sp,4
cmpwi r0,0		#ORIGVÄRDE!
b -(0x802fdde8-0x80095980)-20*4+4 	#n = antalet instr förutom denna 

.skip_collision: 	#jump to the end, don't care about collisions etc
lwzu r7,0(sp)
lwzu r6,4(sp)
lwzu r5,4(sp)
addi sp,sp,4
cmpwi r0,0		#ORIGVÄRDE!
b -(0x802fdde8-0x80095980)-20*4+(0x80095bd4-0x80095980)-6*4


i 80926770:		#world map draw func
b (0x802fd8d8-0x80926770)

i 802fd8d8:
stwu r1,-16(r1)		#orig i 80926770
stwu r5,-4(sp)
stwu r6,-4(sp)
li r5,0
lis r6, 0x802f
ori r6,r6,0x6900
#ZERO EVERYTHING!
stw r5, 0(r6)		
stw r5, 0x4(r6)
#stw r5, 0x8(r6)
#stw r5, 0x14(r6)
#stw r5, 0x18(r6)
#stw r5, 0x1c(r6)
#stw r5, 0x30(r6)
#stw r5, 0x34(r6)
#stw r5, 0x38(r6)
#stw r5, 0x30(r6)
#stw r5, 0x70(r6)
#stw r5, 0x80(r6)
lwzu r6,0(sp)
lwzu r5,4(sp)
addi sp,sp,4
b -(0x802fd8d8-0x80926770)-11*4+4


<!-- object create -->
<memory offset="0x80162c40" value="48193AD0" />
<memory offset="0x802f6710" value="2C0300684082001C3E4081546252B804A2520EA82C12060040820008386000852C0400004BE6C510" />

<!-- after create -->
<memory offset="0x80064350" value="482923F0" />
<memory offset="0x802f6740" value

<!-- game loop, this crashes sometimes!!! -->
<memory offset="0x800e3ad4" value="482764F8" />
<memory offset="0x80359fcc" value

<!-- teleport -->
<memory offset="0x80095c00" value="48262E0C" />
<memory offset="0x802f8a0c" value="382100203CA0802F8097000480780004906569509085695493E1FFFC9421FFF03C80802F386000013CA0802F38C000149064699C60A3699C7C3F0B7880A3000438A5000190A3000490C4699C8083FFB48183FF647C0460404082003880A300042C0500154180002C8083FF6880A3FFB8C00400ACD00500ACC00400B038800000D00500B090830000908300048083FFB480A3FF687C0428404082004080A3000080C300047C0628007C8523784081002C8083FF6480A3FFB8C00400ACD00500ACC00400B038800000D00500B0908300009083000480A3FF688083FFB87C042840408200408083000080C300047C0620007CA42B784081002C8083FF6480A3FFB4C00400ACD00500ACC00400B038800000D00500B090830000908300048083FFB880A3FF647C042840408200388083000080A300047C052000408100288083FF6880A3FFB4C00400ACD00500ACC00400B038800000D00500B0908300009083000438800000908300009083FFB4386000003821001083E1FFFC4BD9D080" />





<!-- skip collision if one is bobomb -->
//INTEGRATE THIS INTO TELEPORT!
<memory offset="0x80095980" value="48268468" />
<memory offset="0x802fdde8" value="94A1FFFC94C1FFFC94E1FFFCA0BC00082C05008541820040A0BF00082C05008541820034A0BC00082C05012441820028A0BF00082C0501244182001C84E1000084C1000484A10004382100042C0000004BD97B4C84E1000084C1000484A10004382100042C0000004BD97D84" />

<!-- zero everything -->
<memory offset="0x80926770" value="4B9D7168" />
<memory offset="0x802fd8d8" value="9421FFF094A1FFFC94C1FFFC38A000003CC0802F60C6690090A6000090A6000484C1000084A100043821000448628E70" />

<!-- try to load bobombs, doesn't work -->
<memory ocarina="true" offset="0x8091FD6C" value="C291FD6C0000000F2C1B000440A20040480000057EA802A63AB5005E3860FFFC386300047C951A2E2C0400004082FFF4388000047C6323967C771A147C16B800408200087EB8AB78480000087EE3BB783EA080917C1618004080000C62B5FD344800000862B5FD707EA903A64E80042000000085000000000000000000000000" />

bra adresser? 
8035a100 - 8035df00 ~ 4000 words! 8035a100 funkar iaf inte.

802fd8d8?
802fdde8?
80300498?



803e4bfc doesn't work on the wii (I think)
try 802f9300 instead

#802f8d1c	sub etc, breakpoint

#kamera!!
815e732c
815e731c

80d25d5c	nåt med kamera, kolla var den ändras!


Använda basabasa.arc = swooper istället för bobomb??

bättre adresser?
8040DA00 -> 80410D80?
804173F0 -> 804233D0?



