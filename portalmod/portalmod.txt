
MARIO modifierbara:
8154b804	mario
8154b910	hastighet i x
8154b8f0	hastighet i y
8154b8b4	läge i y-led
8154b8b0	läge i x-led
8154b904	vänster = 0000d000, höger = 00003000

+0x38c		så man ej kan interagera etc!


80095950	collision callback, gäller fiender, iaf goomba, verkar gälla fiender emellan också
80095C20	player collision! körs när man krockar in i fiender, dock ej om man dödar dem, eller om man hoppar på taggiga
80064d10	körs när fiender tas bort, t.ex. när man hoppat sönder en goomba
80064350	beforeCreate stageactor, körs innan en ny actor skapas, r3 innehåller adress till början på dActor_c-klassen
		kan användas till att göra en portalskjutare! körs när man kastar snö nämligen.


80162C40	OBJECT CREATE!! bara fyll i r3 vilket slags objekt! körs när man kastar snöboll t.ex.

objektnummer: (hex)
33		goomba
36		koopa
191		ett trött mynt...
AE		tusenfoting
90		sån stor svart sak
87		mecha-koopa
86		bobomb (para)
85		vanlig bobomb


81540320	koopa


81540d48	goomba
81540fbc	0x00002000 på marken, 0 i luften, 0x04000000 om fast i tile :o
81540fc4	1 om på marken, 0 i luften
81540fc8	0 i luften, 0x000d0000 på marken
81540fd4	0 i luften
81540fd8	0x10100000 om i luften, etc


fast i tile där uppe:
81540df4	44900000	x
81540df8	c3ee5800	y

slå i väggen där nere:
81540df4	448f0000	x
81540df8	c4190000	y



8006C580	beforeDelete


80064540	beforeDraw__13dStageActor_cFv, r3 = adressen på en random fiende som ritas ut


80095D30	prePlayerCollision! körs när man ska hoppa på goomba t.ex., r3=adress till fiende (tror jag), körs även när man krockar!!!

r3+8		sorts fiende i övre 16 bit! 33=goomba, 57=spike top etc
r3+0x100	rotation! i övre 16 bit!
r3+0xe8		actorns hastighet i x-led
r3+0xec		actorns hastighet i y-led
r3+0xac		pos i x-led
r3+0xb0		pos i y-led
r3+0x124	is_visible
r3+0xf8		gravity?
r3+0x290	något om att man står på fötter?

r3+0x274	krockar med någon tile om != 0!!!


r3+0x5ec	tiden kvar på bomben!! sätt till 0 så sprängs den!


##för den stora svarta!
r3+0x5FC	pos i x
r3+0x600	pos i y
r3+0x5f8	hast. y

		
80162E40	Z13FindActorByIDj
80162E90	findactorbytype


togezo.arc	taggiga gubbar
met_toge.arc	taggig gubbe! använd denna som portal tack! 57 som ID!
kuribo.arc	goomba!
nokonokoX.arc	koopa!





övergripande plan:
i objectcreate, kolla om r3=isboll och ingen tidigare portal är skapad,
 om det är en isboll, ändra till någon fiende som ska agera portal (flygmössa?! :D)

i beforecreate, kolla r3+nåt om det är fienden jag skapat, om det är det,
spara ner adressen till den, och spara ner att första portalen är skapad
sätt gravitation och x/y-speed till 0, flytta en bit ifrån mario så han ej skadas

i något ställe som körs ofta, öka x-speed (så småningom x+y med cos och sin)
medan adress till portalen+0x274 (lower 16 bit) inte är lika med 0.

i preplayercoll, kolla om r3=portal 1 eller 2, om 1, sätt hastigheter och positioner
från portal 2, och vice versa. sätt skapad portal till 0, så en ny kan skapas.



SPARA adress till PORTAL1 I 802f6800, PORTAL2 I 802f6804!

kasta mynt istället för is, flytta efter skapande
FUNKAR!!! ANVÄND ALDRIG 80bc0000!!!!

i adress 80162C40 (object create):
b 0x193ad0		#hoppa till 802f6710

i adress 80064350 (beforecreate): 
b (0x802f6740-0x80064350)	#hoppa till 802f6740


i 802f6710:
cmpwi r3, 0x68		#checka om isboll
bne .quit
li r3, 0x85		#ändra till bob-omb
.quit:
cmpwi r4,0		#kör det som står i 80162c40!
b -0x193ad0-4*4+4


i 802f6740:
stwu r1,-16(r1)		#kör det som stod i 80064350
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r7

lwz r5, 8(r3)		#r5 = typ av fiende
lis r6,0x802f
ori r6,r6,0x6900	#r6 = 0x802f6900

xoris r5,r5,0x0085	
cmpwi r5, 0x0		#om r5 = bobomb
bne .exit

lwz r5,8(r6)		#r5 = 0/1/2
cmpwi r5,2
beq .save_first_portal

.save_second_portal:
lwz r5,4(r6)
cmpwi r5,0		#har det lagts någon innan?
beq .load_2

#else, kill the previous one, mohaha (well, make it invisible..)
li r5,0
lwz r7,4(r6)
stw r5, 0x124(r7)

.load_2:
li r5,2
stw r3,4(r6)		#spara ner adressen till portalen i 802f6904
b .save_portal

.save_first_portal:
lwz r5,0(r6)
cmpwi r5,0		#har det lagts någon innan?
beq .load_1

#else, kill the previous one, mohaha
li r5,0
lwz r7,0(r6)
stw r5, 0x124(r7)

.load_1:
li r5,1
stw r3,0(r6)		#spara ner adressen till portalen i 802f6900

.save_portal:
stw r5,8(r6)		#802f6908 = #portal

.save_mario_direction:
lis r5,0x8154
ori r5,r5,0xb904	#r5 = 0x8154b904
lwz r5, 0(r5)		#r5 = 0000d000 eller 00003000
cmpwi r5,0x3000		
beq .save_right

.save_left:
li r5,0
stw r5,0xf0(r3)
lis r5, 0xc080
stw r5, 0xe8(r3)
b .exit

.save_right:
li r5,1
stw r5,0xf0(r3)
lis r5, 0x4080
stw r5, 0xe8(r3)


.exit:
lwzu r7, 0(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4

b -(0x802f6740-0x80064350)-47*4+4


#d_x: .float 100.0
#d_y: .float 100.0
#.set d_x,0x42c80000;
#.set d_y,0x42c80000;
.set d_x,0x00000000;
.set d_y,0x00000000;


i 800e3ad4: (ställe som körs ofta, uppdaterar tid egentligen va?)
b (0x803f0000-0x800e3ad4)


#r7 ska hela tiden vara adressen till osv!

i 802f8df0:
lbz r0,10(r31)		#original-värde
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r6
stwu r8, -0x4(sp)	#spara r6

lis r6,0x802f
ori r6,r6,0x6900	#r6=0x802f6900, adress till portal1!
lwz r7, 8(r6)		#vilken portal lade vi ut förra?
cmpwi r7, 2		#var det två?
beq .place_first_portal

.place_second_portal:
lwz r7, 0(r6)		#r7 = värdet i adressen
b .cont

.place_first_portal:
lwz r7, 4(r6)		#r7 = värdet i adressen

.cont:
cmpwi r7,0		#if r7=0, then exit maybe?
beq .exit
lwz r5, 8(r7)		#r5 = typ av fiende, DENNA SOM INTE FUNKAR!
xoris r5,r5,0x0085
andis. r5,r5,0xffff
cmpwi r5, 0x0		#om r5 = bobomb
bne .exit		#yes, go to check if we can move
			#else continue


.checkifcanmove:
lwz r5, 0x274(r7)	#r5 = 0 om vi kan röra på den
cmpwi r5, 0
beq .check_mario_direction

.freeze:		#disable gravity and speed
li r5, 0
stw r5, 0xf8(r7)	#gravity = 0
stw r5, 0xe8(r7)	#hastx = 0
stw r5, 0xec(r7)	#hasty = 0
b .exit

.check_mario_direction:
lis r8,0x8076
ori r8,r8,0x12c8	#r8 = addr to wiimote tilt!
lfs f8, 0(r8)		#f8 = tilt
lis r8, 0x4050		#r8 ~ pi
stw r8,0x14(r6)
lfs f5,0x14(r6)		#f5 = pi
fmuls f8,f8,f5		#f8 = wiimotetilt*pi

lwz r5,0xf0(r7)
cmpwi r5,1		
beq .move_right

#testa att sätta x-hast istället!
.move_left:
lis r5, 0xc080		
stw r5,0xe8(r7)		#hastx = -4.0
neg f8,f8
stfs f8,0xec(r7)	#hasty = -wiimotetilt
b .exit

.move_right:
b .cos

.cont_move_right_cos:
#f8 = cos(wiimotetilt)
stfs f8,0xe8(r7)	#hastx = cos(wiimotetilt)

lis r8,0x8076
ori r8,r8,0x12c8	#r8 = addr to wiimote tilt!
lfs f8, 0(r8)		#f8 = tilt
b .sin

.cont_move_right_sin:

stfs f8,0xec(r7)	#hasty = sin(wiimotetilt)
.exit:
lwzu r8, 0(sp)
lwzu r7, 4(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4
b -(0x802f8df0-0x800e3ad4)-54*4+4 	#n = antalet instr förutom denna

.cos:				#experimented to 1-x^2/2+x^3/12 = (x/12-1/2)*x^2+1, only from 0 to pi!
#f8 = in-value
lis r8, 0x4140		#r8 = 12.0
stw r8,0x14(r6)
lfs f5,0x14(r6)		#f5 = 12.0
fdivs f5,f8,f5		#f5 = x/12

lis r8, 0x3f00		#r8 = .5
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = .5
fsubs f5,f5,f6		#f5 = x/12-1/2
fmuls f8,f8,f8		#f8 = x^2
fmuls f8,f8,f5		#f8 = x^2(x/12-1/2)

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)
lfs f6,0x14(r6)		#f6 = 1.0
fadds f8,f8,f6		#f8 = x^2(x/12-1/2)+1
b .cont_move_right_cos

.sin:				#experimented to x-x^3/8 = x(1-x^2/8), -pi to pi
#f8 = in-value
lis r8, 0x4100		#r8 = 8.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 8.0
fmuls f5,f8,f8		#f5 = x^2
fdivs f5,f5,f6		#f5 = x^2/8

lis r8, 0x3f80		#r8 = 1.0
stw r8,0x14(r6)		
lfs f6,0x14(r6)		#f6 = 1.0
fsubs f6,f6,f5		#f6 = 1-x^2/8
fmuls f8,f8,f6		#f8 = x(1-x^2/8)
b .cont_move_right_sin

i 80095D30: (preplayercollision, här ska vi teleporteras! wooh!)
b (0x802f8cf0-0x80095d30)


#r28 = adress till mario eller vem det nu var som krockade(?)

i 802f8cf0:
stwu r1,-32(r1)		#ORIG I 80095d30!
stwu r5, -0x4(sp)	#spara r5
stwu r6, -0x4(sp)	#spara r6
stwu r7, -0x4(sp)	#spara r7
stwu r8, -0x4(sp)	#spara r8


lis r5,0x802f
ori r5,r5,0x6900	#r5 = 0x802f6900

lwz r6,0(r5)		#r6 = adress till första portalen
sub r7,r6,r3		
cmpwi r7,0		#samma adress!
beq .teleport_to_2	#detta var första portalen, gå till andra

#otherwise, check if the other adress was a portal
lwz r6,4(r5)		#r6 = adress till andra portalen
sub r7,r6,r3		
cmpwi r7,0		#samma adress!
bne .exit		#ingen var portal, gå till exit


.teleport_to_1:
lwz r6,0(r5)
b .teleport_and_move_normalized

.teleport_to_2:
lwz r6,4(r5)

.teleport_and_move_normalized:
###normalize!!!###
lfs f5, 0xe8(r28)	#x-speed
lfs f6, 0xec(r28)	#y-speed
fmuls f7,f5,f5		#f7 = x^2
fmuls f8,f6,f6		#f8 = y^2
fadds f7,f7,f8		#f7 = x^2+y^2
frsqrte f7,f7		#f7 = 1/sqrt(x^2+y^2)
fmuls f5,f5,f7		#f5 = x-speed/sqrt(x^2+y^2)
fmuls f6,f6,f7		#f6 = y-speed/sqrt(x^2+y^2)

lfs f7, 0xac(r6)	#f7 = pos i x-led hos portalen
#f5 = hast i x
lis r8,0x41a0		#r8 = 20.0
stw r8, 0xc(r5)
lfs f8, 0xc(r5)
fmuls f5,f5,r8		
fadds f7,f7,f5		#pos = pos+x_speed
stfs f7, 0xac(r28)	#move mario to that x-pos

lfs f7, 0xb0(r6)	#f7 = pos i y-led hos portalen
#f6 = hast i y
lfs f8,0xc(r5)
fmuls f6,f6,f8
fadds f7,f7,f6		#pos = pos+x_speed
stfs r7, 0xb0(r28)	#move mario to that y-pos

.exit:
lwzu r8, 0(sp)
lwzu r7, 4(sp)
lwzu r6, 4(sp)
lwzu r5, 4(sp)
addi sp,sp,4
b -(0x802f8cf0-0x80095d30)-43*4+4 	#n = antalet instr förutom denna


<memory offset="0x80162c40" value="48193AD0" />
<memory offset="0x80064350" value="482923F0" />
<memory offset="0x800e3ad4" value="4821531C" />
<memory offset="0x80095d30" value="48262FC0" />
<memory offset="0x802f6710" value="2C03006840820008386000852C0400004BE6C524" />
<memory offset="0x802f6740" value="9421FFF094A1FFFC94C1FFFC94E1FFFC80A300083CC0802F60C669006CA500852C0500004082009080A600082C0500024182002880A600042C0500004182001038A0000080E6000490A7012438A00002906600044800002480A600002C0500004182001038A0000080E6000090A7012438A000019066000090A600083CA0815460A5B90480A500002C0530004182001838A0000090A300F03CA0C08090A300E84800001438A0000190A300F03CA0408090A300E884E1000084C1000484A10004382100044BD6DB50" />
<memory offset="0x802f8df0" value="881F000A94A1FFFC94C1FFFC94E1FFFC9501FFFC3CC0802F60C6690080E600082C0700024182000C80E600004800000880E600042C0700004182009080A700086CA5008574A5FFFF2C0500004082007C80A702742C0500004182001838A0000090A700F890A700E890A700EC4800005C3D008076610812C8C10800003D00405091060014C0A60014ED08017280A700F02C050001418200183CA0C08090A700E87D0800D0D10700EC4800002048000034D10700E83D008076610812C8C10800004800005CD10700EC8501000084E1000484C1000484A10004382100044BDEAC103D00414091060014C0A60014ECA828243D003F0091060014C0C60014ECA53028ED080232ED0801723D003F8091060014C0C60014ED08302A4BFFFF983D00410091060014C0C60014ECA80232ECA530243D003F8091060014C0C60014ECC62828ED0801B24BFFFF80" />
<memory offset="0x802f8cf0" value="9421FFE094A1FFFC94C1FFFC94E1FFFC9501FFFC3CA0802F60A5690080C500007CE330502C0700004182001C80C500047CE330502C0700004082006080C500004800000880C50004C0BC00E8C0DC00ECECE50172ED0601B2ECE7402AFCE03834ECA501F2ECC601F2C0E600AC3D0042489105000CC105000CECA50232ECE7282AD0FC00ACC0E600B0C105000CECC60232ECE7302AD0FC00B08501000084E1000484C1000484A10004382100044BD9CF98" />
<memory offset="0x80095D60" value="480001E4" />
